#!/bin/bash
# Use > 1 to consume two arguments per pass in the loop (e.g. each
# argument has a corresponding value to go with it).
# Use > 0 to consume one or more arguments per pass in the loop (e.g.
# some arguments don't have a corresponding value to go with it such
# as in the --default example).
# note: if this is set to > 0 the /etc/hosts part is not recognized ( may be a bug )

EXECUTING_BASH_PATH="$(dirname "$(readlink -f "$0")")"
CURRENT_PATH="`pwd`"


source $EXECUTING_BASH_PATH/ansible_tdd.cnf  # extract config
export ATDD_PROJECT_CONFIG=$ATDD_PROJECT_CONFIG
if [ ! -z "${VERIFY_TURN_OFF_FAIL_ON_ERROR}" ]
then
   export TURN_OFF_FAIL_ON_ERROR=$VERIFY_TURN_OFF_FAIL_ON_ERROR
fi

STDERR_OUTPUT_VIEWER="$CURRENT_PATH/serverspec_stderr_VIEWER"
STDERR_OUTPUT="$CURRENT_PATH/serverspec_stderr"
STDOUT_OUTPUT="$CURRENT_PATH/serverspec_stdout"
export BASENAME_PLAYBOOK_DIRECTORY="${CURRENT_PATH}"
export ATDD_SOURCE_DIRECTORY="${EXECUTING_BASH_PATH}"
export ATDD_INVOKE_VERIFY_ROLE="${EXECUTING_BASH_PATH}"/commands/templates/ansible_tdd_invoke_verify_role.yml
export ATDD_SETUP_MOCKUP="${EXECUTING_BASH_PATH}"/commands/templates/setup-mockup.yml

export ATDD_ROLE_SPEC_HELPER="${EXECUTING_BASH_PATH}/commands/templates/serverspec/role/spec_helper.rb"
export ATDD_PLAYBOOK_SPEC_HELPER="${EXECUTING_BASH_PATH}/commands/templates/serverspec/spec_helper.rb"

command=$1
app_name=$2
config=$3
opt=$4

server_do_action(){
    APP_NAME=$1
    ACTION=$2

    first_read='first_read'
       while IFS='= '
        do
            if [[ $first_read == 'first_read' ]]
            then
               read var val
               first_read='second_read'
            fi

            if [ -z "${var}" ]
            then
                # exit if EOF
                break
            fi

            if [[ $var == [* ]]
            then
                instance_ids=''
                aws_region=''
                while true; do
                    read var val

                    if [[ $var == [* ]]  || [ -z "${var}" ]
                    then
                        break
                    fi

                    echo "$val" >>  $CURRENT_PATH/SSH_INFO.cnf
                    source $CURRENT_PATH/SSH_INFO.cnf  # extract config
                    rm -rf $CURRENT_PATH/SSH_INFO.cnf

                    if [ ! -z "${instance_id}" ]
                    then
                        instance_ids="$instance_id,$instance_ids"
                        aws_region=$aws_region
                    fi

                done
                if [ ! -z "${instance_id}" ]
                then
                    instance_ids=${instance_ids::-1}
                    tput setaf 2 # change text to green color
                    echo_info "$ACTION ALL SERVERS: ${instance_ids} at region: $aws_region"
                    tput sgr0  # reset text color
                    ansible-playbook -i $CURRENT_PATH/.log/$APP_NAME/tdd_ec2_inventory.ini $EXECUTING_BASH_PATH/commands/$ACTION-EC2.yml  --extra-vars "app_name=$APP_NAME aws_region=$aws_region instance_ids=$instance_ids vault_ec2_secret_access=$CURRENT_PATH/vault_ec2_secret_access.yml"   --vault-password-file  ./.vault_pass.txt
                fi
            fi

        done < $CURRENT_PATH/.log/$APP_NAME/tdd_ec2_inventory.ini
}

echo_info(){
    tput setaf 2 # change text to green color
    echo $1
    tput sgr0  # reset text color
}

echo_error(){
    tput setaf 1 # change text to red color
    echo $1
    tput sgr0  # reset text color
}

echo_warning(){
    tput setaf 3 # change text to yellow color
    echo $1
    tput sgr0  # reset text color
}


usage () {
    tput setaf 2 # change text to green color
  echo "Usage: ansible-tdd COMMAND APP_NAME CONFIG"
  echo "Commands:"
  echo "    init:       Generate scaffolding for ansible-tdd"
  echo "    generate-role-testcase:       Generate scaffolding for role testcase"
  echo "    generate-playbook-testcase:       Generate scaffolding for playbook"
  echo "    create:     Create list aw2 instances belong file provisioning"
  echo "    update-inventory:     update info list aw2 instances belong file provisioning"
  echo "    start:      Start/initialize a container"
  echo "    stop:       Stop a running container"
  echo "    destroy:    Stop and remove all aw2 instances"
  echo "    login:      Start a bash shell in a running container. EX:ansible-tdd login group-instance"
  echo "    list:       List all instances"
  echo "    prepare-test-tools: Upload all test tools to all server"
  echo "    clear-test-tools: remove all test tools to all server"
  echo "    test:       Run CONVERGE and verify by serverspec"
  echo "    EX:"
  echo "        atdd app_name test playbook.yml"
  echo "    converge:   Bootstrap a container for the config based on a template"
  echo "    EX:"
  echo "        atdd app_name converge playbook.yml"
  echo "    verify:     Only run serverspec verify server"
  echo "    EX:"
  echo "        Run a testcase"
  echo "        atdd verify app_name TEST-CASE-NAME "
  echo "        Run all"
  echo "        atdd verify app_name"
  echo "        atdd verify app_name all"
  tput sgr0  # reset text color
  exit 1
}


ec2_update_inventory(){
   if [ -d  $CURRENT_PATH/group_vars  ]; then
      ln -s $CURRENT_PATH/group_vars  $EXECUTING_BASH_PATH/commands
   fi
   if [ -d  $CURRENT_PATH/host_vars  ]; then
         ln -s $CURRENT_PATH/host_vars  $EXECUTING_BASH_PATH/commands
   fi
   ansible-playbook $EXECUTING_BASH_PATH/commands/UPDATE_AWS_INVENTORY.yml --extra-vars "tdd_provisioning=$CURRENT_PATH/$ATDD_PROJECT_CONFIG  vault_ec2_secret_access=$CURRENT_PATH/vault_ec2_secret_access.yml"  --vault-password-file   ./.vault_pass.txt

   if [ -d  $CURRENT_PATH/group_vars  ]; then
      rm  $EXECUTING_BASH_PATH/commands/group_vars -f
   fi
   if [ -d  $CURRENT_PATH/host_vars  ]; then
         rm  $EXECUTING_BASH_PATH/commands/host_vars -f
      fi
}

ec2_create(){

    if [ -d  $CURRENT_PATH/group_vars  ]; then
      ln -s $CURRENT_PATH/group_vars  $EXECUTING_BASH_PATH/commands
   fi
   if [ -d  $CURRENT_PATH/host_vars  ]; then
         ln -s $CURRENT_PATH/host_vars  $EXECUTING_BASH_PATH/commands
   fi
   ansible-playbook $EXECUTING_BASH_PATH/commands/CREATE-EC2.yml --extra-vars "tdd_provisioning=$CURRENT_PATH/$ATDD_PROJECT_CONFIG  vault_ec2_secret_access=$CURRENT_PATH/vault_ec2_secret_access.yml"  --vault-password-file   ./.vault_pass.txt

   if [ -d  $CURRENT_PATH/group_vars  ]; then
      rm  $EXECUTING_BASH_PATH/commands/group_vars -f
   fi
   if [ -d  $CURRENT_PATH/host_vars  ]; then
         rm  $EXECUTING_BASH_PATH/commands/host_vars -f
      fi

}

ec2_rename_instance(){

    if [ -d  $CURRENT_PATH/group_vars  ]; then
      ln -s $CURRENT_PATH/group_vars  $EXECUTING_BASH_PATH/commands
   fi
   if [ -d  $CURRENT_PATH/host_vars  ]; then
         ln -s $CURRENT_PATH/host_vars  $EXECUTING_BASH_PATH/commands
   fi
    ansible-playbook $EXECUTING_BASH_PATH/commands/RENAME_AWS_INSTANCE.yml --extra-vars "tdd_provisioning=$CURRENT_PATH/$ATDD_PROJECT_CONFIG  vault_ec2_secret_access=$CURRENT_PATH/vault_ec2_secret_access.yml"  --vault-password-file   ./.vault_pass.txt

   if [ -d  $CURRENT_PATH/group_vars  ]; then
      rm  $EXECUTING_BASH_PATH/commands/group_vars -f
   fi
   if [ -d  $CURRENT_PATH/host_vars  ]; then
         rm  $EXECUTING_BASH_PATH/commands/host_vars -f
      fi


}

ec2_config(){
    app_name=$1
    if [ ! -f $CURRENT_PATH/.log/$app_name/tdd_ec2_inventory.ini ]  ||  [ ! -f $CURRENT_PATH/.log/$app_name/ansible_tdd_inventory.yml ];
    then
       ec2_create
    fi
}

login_to_instance (){
    app_name=$1
    SERVER_GROUP=$2
    if [ ! -f $CURRENT_PATH/.log/$app_name/tdd_ec2_inventory.ini ]; then
             server_do_action $app_name CREATE
    fi

    if [  -z "${SERVER_GROUP}" ]
    then
        echo_error "Where do you want to go?"
    fi
    while IFS='= ' read var val
    do

        if [[ "$var" == "[$SERVER_GROUP]" ]]
        then
            # only get a first instance of group
            read var val
            echo "$val" >>  $CURRENT_PATH/SSH_INFO.cnf
            source $CURRENT_PATH/SSH_INFO.cnf  # extract config
            rm -rf $CURRENT_PATH/SSH_INFO.cnf

            break
        fi
    done < $CURRENT_PATH/.log/$app_name/tdd_ec2_inventory.ini

    if [ ! -z "${ansible_ssh_user}" ] && [ ! -z "${ansible_host}" ] && [ ! -z "${ansible_port}" ]
    then
        custom_ssh_private_key_file=''

        if [ ! -z "${ansible_ssh_private_key_file}" ]
        then
            custom_ssh_private_key_file="-i ${ansible_ssh_private_key_file}"
        fi
        echo "$custom_ssh_private_key_file";
        ssh $ansible_ssh_user@$ansible_host -p $ansible_port $custom_ssh_private_key_file
    fi

}
prepare_test_tools(){
    app_name=$1
    ansible-playbook -i $CURRENT_PATH/.log/$app_name/tdd_ec2_inventory.ini $EXECUTING_BASH_PATH/commands/PREPARE_TEST_TOOLS.yml  --extra-vars "app_name=$app_name"
}

clear_test_tools(){
    app_name=$1
    ansible-playbook -i $CURRENT_PATH/.log/$app_name/tdd_ec2_inventory.ini $EXECUTING_BASH_PATH/commands/CLEAR_TEST_TOOLS.yml  --extra-vars "app_name=$app_name"
}

do_verify(){
    app_name=$1
    config=$2

    export APP_NAME="${app_name}"

    if [ ! -z "${MANUAL_PREPARE_TEST_TOOL}" ] &&  $MANUAL_PREPARE_TEST_TOOL
    then
       prepare_test_tools
    fi

    export ATDD_PLAYBOOK_DIRECTORY="${CURRENT_PATH}"

    if [ ! -z "${config}" ]
    then
         export TESTCASE_NAME="${config}"
    fi

    rake  -f $EXECUTING_BASH_PATH/commands/templates/serverspec/Rakefile spec


    if [ ! -z "${MANUAL_PREPARE_TEST_TOOL}" ] &&  $MANUAL_PREPARE_TEST_TOOL
    then
       clear_test_tools
    fi

}
do_converge(){
    app_name=$1
    config=$2
    rm $CURRENT_PATH/.log/$app_name/verify-roles/data/* -rf
    rm $CURRENT_PATH/.log/$app_name/verify-roles/info/* -rf
    ansible-playbook  -i $CURRENT_PATH/.log/$app_name/tdd_ec2_inventory.ini $CURRENT_PATH/$config   --extra-vars "app_name=$app_name"  --vault-password-file   ./.vault_pass.txt

}
# My doesn't like uppercase characters, spaces or special characters, catch it now before we build everything out and then find out
re='[A-Z !@#$%^&*()+~`=]'
if [[ $config =~ $re ]];
  then
    echo
    echo_error "ERROR: Config name must not contain upper case characters, spaces or special characters. Correct config name and rerun $0."
    echo
    exit 1
fi
case $command in

    init)
        ## RUN CREATE NEW EC2 INSTANCE
        ROLE_DIRECTORY="$(basename ${CURRENT_PATH})"
        ansible-playbook $EXECUTING_BASH_PATH/commands/INIT-TDD.yml --extra-vars "ROLE_DIRECTORY=$ROLE_DIRECTORY"
    shift # past argument
    ;;

    generate-role-testcase)
         if [ -z "${config}" ]; then
            echo_error "Please enter testcase name!!"
            exit
        fi
        ## RUN CREATE NEW EC2 INSTANCE
        ansible-playbook $EXECUTING_BASH_PATH/commands/GENERATE-ROLE-TESTCASE.yml --extra-vars "testcase=$config"
    shift # past argument
    ;;

    generate-playbook-testcase)
        if [ -z "${config}" ]; then
            echo_error "Please enter testcase name!!"
            exit
        fi
        ## RUN CREATE NEW EC2 INSTANCE
        ansible-playbook $EXECUTING_BASH_PATH/commands/GENERATE-PLAYBOOK-TESTCASE.yml --extra-vars "testcase=$config"
    shift # past argument
    ;;

    create)
        ## RUN CREATE NEW EC2 INSTANCE
        ec2_create
        ec2_rename_instance
        ec2_update_inventory
    shift # past argument
    ;;

    update-inventory)
     ## RUN UPDATE EC2 INSTANCE
        ec2_update_inventory
    shift # past argument
    ;;
    list)
        ## LIST ALL INSTANCE
        tput setaf 2 # change text to green color
        cat  $CURRENT_PATH/.log/$app_name/tdd_ec2_inventory.ini
        tput sgr0  # reset text color
    shift # past argument

    ;;

    login) # login to first instance in a group
        login_to_instance  $app_name  $config
    shift # past argument
    ;;

    start)
        ec2_config $app_name
        server_do_action  $app_name START
        # regenerate config
        ec2_create
    shift # past argument
    ;;

    stop)
#        ec2_config $app_name
#        server_do_action  $app_name STOP
    shift # past argument
    ;;

    destroy)
#       ec2_config $app_name
#       server_do_action  $app_name TERMINATE
    shift # past argument
    ;;

    prepare-test-tools)
        prepare_test_tools $app_name
    shift # past argument
    ;;

    clear-test-tools)
       clear_test_tools $app_name

    shift # past argument
    ;;

    test)
        # RUN ANSIBLE
      do_converge  $app_name  $config
      do_verify  $app_name  $config
    shift # past argument
    ;;

    converge)
        do_converge $app_name $config
    shift # past argument
    ;;

    verify)
        do_verify  $app_name $config
    shift # past argument
    ;;

    -h|--help)
        usage
    shift # past argument
    ;;

    *)
      echo "unsupport action $ACTION"      # unknown option
    ;;
esac

