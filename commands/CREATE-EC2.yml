---

- hosts: localhost
  connection: local
  vars:
    ec2_inventory: "./tdd_ec2_inventory.ini"
    no_log: True
  pre_tasks:
   - include_vars: "{{ item }}"
     with_first_found:
        - "{{tdd_provisioning}}"

  tasks:
    - file:
        dest: "{{ec2_inventory}}"
        state: absent

    - name: Start the sandbox instances
      ec2:
        aws_access_key: '{{ lookup("env","AWS_ACCESS_KEY_ID") }}'
        aws_secret_key: '{{ lookup("env","AWS_SECRET_ACCESS_KEY") }}'
        region: '{{item.aws_region}}'
        instance_type: '{{item.aws_instance_type}}'
        key_name: '{{item.aws_keyname}}'
        image: '{{item.aws_image_id}}'
        group:
          - "anphabe-hq"
          - "alltraffic-from-vpc"
        vpc_subnet_id: '{{item.vpc_subnet_id}}'
        assign_public_ip: '{{item.assign_public_ip}}'
        wait: yes
        instance_tags: '{{ {"Name": provision.app_name~"-"~item.group,"app_name": provision.app_name,"group_server":item.group, "tdd_ansible": "tdd-ansible"}  }}'
        exact_count: '{{item.num_instances}}'
        count_tag: '{{ {"Name": provision.app_name~"-"~item.group} }}'
        volumes:
          - device_name: /dev/sda1
            volume_size: 8
            delete_on_termination: true
      register: ec2
      with_items:
        - "{{provision.servers}}"
      no_log: "{{no_log}}"

    - name: Add new instance to host group
      add_host: name="{{item.0.item.group}}-{{item.1.id}}" hostname="{{ item.1.public_ip }}" groupname="{{item.0.item.group}}" ansible_ssh_user="{{ item.0.item.ansible_ssh_user }}" ansible_port="{{ item.0.item.ansible_port }}" instances_id="{{item.1.id}}"
      with_subelements:
        - ec2.results
        - tagged_instances
      no_log: "{{no_log}}"

    - name: Log inventory File
      template:
        src: "templates/ec2-inventory.j2"
        dest: "{{ec2_inventory}}"